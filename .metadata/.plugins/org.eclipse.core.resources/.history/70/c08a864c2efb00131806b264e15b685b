package db2redis;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class DataReader {

	private List<ForumThread> threads;
	
	private List<ForumPost> posts;
	
	private List<ForumUser> users;
	
	private static final String TASK_RESULT = "task_result";
	
	private static final String DATE = "date";
	
	private static final String RULE = "rule";
	
	private static final String THREAD_TITLE = "thread-title";
	
	private static final String USER_DATA = "user-data";
	
	private static final String USER_LOGIN = "user-login";
	
	private static final String POST_CONTENT = "post-content";
	
	private static final String POST_DETAILS = "post-details";
	
	public DataReader() {
		threads = new ArrayList<>();
		posts = new ArrayList<ForumPost>();
		users = new ArrayList<ForumUser>();
	}
	
	private void clear() {
		threads.clear();
		posts.clear();
		users.clear();
	}
	
	private Document parse(File file) throws ParserConfigurationException, SAXException, IOException {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		Document document = builder.parse(file);
		document.getDocumentElement().normalize();
		
		return document;
	}
	
	private void dealWithRules(NodeList rules) {
		
		for (int i = 0; i < rules.getLength(); i++) {
			
			Node node = rules.item(i);
			
			
		}
	}
	
	public void load(String filePath) throws ParserConfigurationException, SAXException, IOException {
		clear();
		File file = new File(filePath);
		Document document = parse(file);
		NodeList list = document.getElementsByTagName(TASK_RESULT);
		
		for (int i = 0; i < list.getLength(); i++) {
			
			Node node = list.item(i);
			
			if (node.getNodeType() == Node.ELEMENT_NODE) {
				
				Element element = (Element) node;
				
//				NodeList dateNodeList = element.getElementsByTagName(DATE);
//				
//				if (dateNodeList.getLength() > 0) {
//					Node dateNode = dateNodeList.item(0);
//					System.out.println(((Element)dateNode).getTextContent());
//				}
				
				NodeList rules = element.getElementsByTagName(RULE);
				
				dealWithRules(rules);
			}
		}
	}
}

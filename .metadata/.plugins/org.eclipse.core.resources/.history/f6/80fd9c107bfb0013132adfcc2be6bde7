package db2redis;

import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import redis.clients.jedis.Jedis;

public class Main {
	
	private DataReader reader = new DataReader();
	
	private Jedis jedis = new Jedis("127.0.0.1", 6379);
	
	private void insertUser(ForumUser user) {
		
		Long id = jedis.incr("user_id");
		String userKey = "user:" + id.toString();
		jedis.hmset(userKey, user.getMap());
		jedis.hset("users", user.getLogin(), id.toString());
	}
	
	private void insertPost(ForumPost post) {
		
		Long id = jedis.incr("post_id");
		String postKey = "post:id:" + id.toString();
		
		Map<String, String> map = post.getMap();
		String userID = jedis.hget("users", post.getUser());
		String threadID = jedis.hget("threads", post.getThread());
		
		if (userID != null) {
			map.put("user", userID);
		}
		
		if (threadID != null) {
			map.put("thread", threadID);
		}
		
		jedis.hmset(postKey, map);
		
		if (post.getDate() != null) {
			jedis.sadd("posts:year:" + post.getDate().getYear(), id.toString());
		}
		
		jedis.sadd("posts:thread:" + post.getThread(), id.toString());
	}
	
	private void insertThread(ForumThread thread) {
		
		Long id = jedis.incr("thread_id");
		String threadKey = "thread:id:" + id.toString();
		
		Map<String, String> map = thread.getMap();
		String userID = jedis.hget("users", thread.getUser());
		
		if (userID != null) {
			map.put("user", userID);
		}
		
		jedis.hmset(threadKey, map);
		jedis.hset("threads", thread.getTitle(), id.toString());
		
		if (thread.getDate() != null) {
			jedis.lrem("threads:year:" + thread.getDate().getYear(), 0, thread.getTitle());
			jedis.lpush("threads:year:" + thread.getDate().getYear(), thread.getTitle());
		}
	}
	
	private void insertData(Map<String, ForumThread> threads, List<ForumPost> posts, Map<String, ForumUser> users) {
		
		long begin = System.currentTimeMillis();
		
		for (ForumUser u : users.values()) {
			insertUser(u);
		}
		
		for (ForumThread t : threads.values()) {
			insertThread(t);
		}
		
		for (ForumPost p : posts) {
			insertPost(p);
		}
		
		long end = System.currentTimeMillis();
		
		System.out.println("Ładowanie danych zajęło: " + ((end - begin)/1000.) + "s");
	}
	
	private void getMostPopularThreadIn2013() {
		
		System.out.println();
		long begin = System.currentTimeMillis();
		
		Set<String> ids = jedis.keys("thread:id:*");
		String ms = "";
		long ml = 0;
		
		for (String s : ids) {
			String title = jedis.hget(s, "title");
			String yearKey = "posts:year:2013";
			String threadKey = "posts:thread:" + title;
			long x = jedis.sinter(yearKey, threadKey).size();
			
			//System.out.println(title + "\n" + x);
			
			if (x > ml) {
				ml = x;
				ms = title;
			}
		}
		
		
		long end = System.currentTimeMillis();
		System.out.println("Najbardziej popularny wątek w 2013: " + ms + "\n" + ml);
		System.out.println(((end - begin)/1000.) + "s");
	}
	
	private void getNumberOfThreadsIn2013() {
		
		System.out.println();
		long begin = System.currentTimeMillis();
		long n = jedis.llen("threads:year:2013");
		long end = System.currentTimeMillis();
		System.out.println("Liczba wątków w 2013: " + n);
		System.out.println(((end - begin)/1000.) + "s");
	}
	
	private void getAveragePostLength() {
		
		System.out.println();
		long begin = System.currentTimeMillis();
		Set<String> keys = jedis.keys("post:id:*");
		long sum = 0;
		
		for (String s : keys) {
			sum += jedis.hget(s, "content").length();
		}
		
		long end = System.currentTimeMillis();
		System.out.println("Średnia długość posta: " + sum/(float)keys.size());
		System.out.println(((end - begin)/1000.) + "s");
	}
	
	private void getMostActiveUser() {
		
		System.out.println();
		Map<String, Integer> posts = new HashMap<String, Integer>();
		long begin = System.currentTimeMillis();
		Set<String> keys = jedis.keys("post:id:*");
		
		for (String s : keys) {
			String user = jedis.hget(s, "user");
			
			int prev = 0;
			
			if (posts.containsKey(user)) {
				prev = posts.get(user);
			}
			
			prev++;
			posts.put(user, prev);
		}
		
		String mostActiveUser = "";
		int userPosts = 0;
		
		for (Map.Entry<String, Integer> e : posts.entrySet()) {
			if (e.getValue() > userPosts) {
				userPosts = e.getValue();
				mostActiveUser = e.getKey();
			}
		}
		
		String mostActiveUserName = jedis.hmget("user:" + mostActiveUser, "login").get(0);
		
		long end = System.currentTimeMillis();
		System.out.println("Uzytkownik wypowiadajacy się w największej liczbie tematów: " + mostActiveUserName);
		System.out.println(((end - begin)/1000.) + "s");
	}
	
	private void getMostActiveComentator() {
		
	}
	
	private void getNumberOfPostsFromKCity() {
		
		System.out.println();
		long begin = System.currentTimeMillis();
		
		Set<String> keys = jedis.keys("post:id:*");
		long n = 0;
		
		for (String s : keys) {
			
			String userID = jedis.hmget(s, "user").get(0);
			String city = jedis.hmget("user:" + userID, "city").get(0);
			
			if (city.startsWith("K")) {
				n++;
			}
		}
		
		long end = System.currentTimeMillis();
		System.out.println("Liczba wątków w 2013: " + n);
		System.out.println(((end - begin)/1000.) + "s");
	}
	
	private void getNumberOfPostsWithFrodo() {
		
		System.out.println();
		long begin = System.currentTimeMillis();
		
		Set<String> keys = jedis.keys("post:id:*");
		long n = 0;
		
		for (String s : keys) {

			String content = jedis.hmget(s, "content").get(0);
			
			if (content != null) {
				String frodo = "Frodo";
				
				int ocuurences = (content.length() - content.replace(frodo, "").length())/frodo.length();
				
				n+= ocuurences;
			}
		}
		
		long end = System.currentTimeMillis();
		System.out.println("Łaczna liczba występień słowa \"Frodo\": " + n);
		System.out.println(((end - begin)/1000.) + "s");
	}
	
	private void get35thWord() {
		
	}
	
	private void test() {
		
		getNumberOfThreadsIn2013();
		getMostPopularThreadIn2013();
		getAveragePostLength();
		getMostActiveUser();
		getMostActiveComentator();
		getNumberOfPostsWithFrodo();
		getNumberOfPostsFromKCity();
		get35thWord();
	}

	public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException {
		
		Main main = new Main();
		main.jedis.flushDB();
		
		long begin = System.currentTimeMillis();
		main.reader.load("tolkien.xml");
		long end = System.currentTimeMillis();
		System.out.println("Wczytanie i parsowanie danych zajęło: " + ((end - begin)/1000.) + "s");
		
		main.insertData(main.reader.getThreads(), main.reader.getPosts(), main.reader.getUsers());
		
		main.test();

		main.jedis.close();
	}

}
